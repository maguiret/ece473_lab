%!PS-Adobe-3.0
%%Title: lab3_code.c
%%For: Jacob
%%Creator: a2ps version 4.14
%%CreationDate: Thu Nov  7 12:47:37 2013
%%BoundingBox: 24 24 588 768
%%DocumentData: Clean7Bit
%%Orientation: Landscape
%%Pages: 3
%%PageOrder: Ascend
%%DocumentMedia: Letter 612 792 0 () ()
%%DocumentNeededResources: font Courier
%%+ font Courier-Bold
%%+ font Courier-BoldOblique
%%+ font Courier-Oblique
%%+ font Helvetica
%%+ font Helvetica-Bold
%%+ font Symbol
%%+ font Times-Bold
%%+ font Times-Roman
%%DocumentProcessColors: Black 
%%DocumentSuppliedResources: procset a2ps-a2ps-hdr
%%+ procset a2ps-black+white-Prolog
%%+ encoding ISO-8859-1Encoding
%%EndComments
/a2psdict 200 dict def
a2psdict begin
%%BeginProlog
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Check PostScript language level.
/languagelevel where {
  pop /gs_languagelevel languagelevel def
} {
  /gs_languagelevel 1 def
} ifelse

% EPSF import as in the Red Book
/BeginInclude {
  /b4_Inc_state save def    		% Save state for cleanup
  /dict_count countdictstack def	% Count objects on dict stack
  /op_count count 1 sub def		% Count objects on operand stack 
  userdict begin
    0 setgray 0 setlinecap
    1 setlinewidth 0 setlinejoin
    10 setmiterlimit [ ] 0 setdash newpath
    gs_languagelevel 1 ne {
      false setstrokeadjust false setoverprint 
    } if
} bind def

/EndInclude {
  count op_count sub { pos } repeat	% Clean up stacks
  countdictstack dict_count sub { end } repeat
  b4_Inc_state restore
} bind def

/BeginEPSF {
  BeginInclude
  /showpage { } def
} bind def

/EndEPSF {
  EndInclude
} bind def

% Page prefeed
/page_prefeed {         % bool -> -
  statusdict /prefeed known {
    statusdict exch /prefeed exch put
  } {
    pop
  } ifelse
} bind def

/deffont {
  findfont exch scalefont def
} bind def

/reencode_font {
  findfont reencode 2 copy definefont pop def
} bind def

% Function c-show (str => -)
% centers text only according to x axis.
/c-show { 
  dup stringwidth pop
  2 div neg 0 rmoveto
  show
} bind def

% Function l-show (str => -)
% prints texts so that it ends at currentpoint
/l-show {
  dup stringwidth pop neg 
  0 
  rmoveto show
} bind def

% center-fit show (str w => -)
% show centered, and scale currentfont so that the width is less than w
/cfshow {
  exch dup stringwidth pop
  % If the title is too big, try to make it smaller
  3 2 roll 2 copy
  gt
  { % if, i.e. too big
    exch div
    currentfont exch scalefont setfont
  } { % ifelse
    pop pop 
  }
  ifelse
  c-show			% center title
} bind def

% Return the y size of the current font
% - => fontsize
/currentfontsize {
  currentfont /FontType get 0 eq {
    currentfont /FontMatrix get 3 get
  }{
    currentfont /FontMatrix get 3 get 1000 mul
  } ifelse
} bind def

% reencode the font
% <encoding-vector> <fontdict> -> <newfontdict>
/reencode { %def
  dup length 5 add dict begin
    { %forall
      % <vector> <key> <val>
      1 index /FID ne 
      { def }{ pop pop } ifelse
    } forall
    /Encoding exch def % -

    % Use the font's bounding box to determine the ascent, descent,
    % and overall height; don't forget that these values have to be
    % transformed using the font's matrix.
    % We use `load' because sometimes BBox is executable, sometimes not.
    % Since we need 4 numbers an not an array avoid BBox from being executed
    /FontBBox load aload pop
    FontMatrix transform /Ascent exch def pop
    FontMatrix transform /Descent exch def pop
    /FontHeight Ascent Descent sub def

    % Get the underline position and thickness if they're defined.
    % Use 1 if they are not defined.
    currentdict /FontInfo 2 copy known
    { get
      /UnderlinePosition 2 copy % <FontInfo> /UP <FontInfo> /UP
      2 copy known
      { get }{ pop pop 1 } ifelse
      0 exch FontMatrix transform exch pop
      def % <FontInfo>

      /UnderlineThickness 2 copy % <FontInfo> /UT <FontInfo> /UT
      2 copy known
      { get }{ pop pop 1 } ifelse
      0 exch FontMatrix transform exch pop
      def % <FontInfo>
      pop % -
    }{ pop pop
    } ifelse

    currentdict
  end 
} bind def

% composite fonts for ASCII-EUC mixed strings
% Version 1.2 1/31/1990
% Original Ken'ichi HANDA (handa@etl.go.jp)
% Modified Norio Katayama (katayama@rd.nacsis.ac.jp),1998
% Extend & Fix Koji Nakamaru (maru@on.cs.keio.ac.jp), 1999
% Anyone can freely copy, modify, distribute this program.

/copyfont {	% font-dic extra-entry-count  copyfont  font-dic
	1 index maxlength add dict begin
	{	1 index /FID ne 2 index /UniqueID ne and
		{def} {pop pop} ifelse
	} forall
	currentdict
	end
} bind def

/compositefont { % ASCIIFontName EUCFontName RomanScale RomanOffset Rot(T/F) compositefont font
    /RomanRotation exch def
    /RomanOffset exch def
    /RomanScale exch def
    userdict /fixeucfont_dict known not {
	userdict begin
	    /fixeucfont_dict 2 dict begin
		/UpperByteEncoding [
		    16#00 1 16#20 { pop 0 } for
		    16#21 1 16#28 { 16#20 sub } for
		    16#29 1 16#2F { pop 0 } for
		    16#30 1 16#74 { 16#27 sub } for
		    16#75 1 16#FF { pop 0 } for
		] def
	        /LowerByteEncoding [
		    16#00 1 16#A0 { pop /.notdef } for
		    16#A1 1 16#FE { 16#80 sub 16 2 string cvrs
				    (cXX) dup 1 4 -1 roll
				    putinterval cvn } for
		    /.notdef
		] def
		currentdict
	    end def
	end
    } if
    findfont dup /FontType get 0 eq {
	14 dict begin
	    %
	    % 7+8 bit EUC font
	    %
	    12 dict begin
		/EUCFont exch def
		/FontInfo (7+8 bit EUC font) readonly def
		/PaintType 0 def
		/FontType 0 def
		/FontMatrix matrix def
		% /FontName
		/Encoding fixeucfont_dict /UpperByteEncoding get def
		/FMapType 2 def
		EUCFont /WMode known
		{ EUCFont /WMode get /WMode exch def }
		{ /WMode 0 def } ifelse
		/FDepVector [
		    EUCFont /FDepVector get 0 get
		    [ 16#21 1 16#28 {} for 16#30 1 16#74 {} for ]
		    {
			13 dict begin
			    /EUCFont EUCFont def
			    /UpperByte exch 16#80 add def	
			    % /FontName
			    /FontInfo (EUC lower byte font) readonly def
			    /PaintType 0 def
			    /FontType 3 def
			    /FontMatrix matrix def
			    /FontBBox {0 0 0 0} def
			    /Encoding
				fixeucfont_dict /LowerByteEncoding get def
			    % /UniqueID
			    % /WMode
			    /BuildChar {
				gsave
				exch dup /EUCFont get setfont
				/UpperByte get
				2 string
				dup 0 4 -1 roll put
				dup 1 4 -1 roll put
				dup stringwidth setcharwidth
				0 0 moveto show
				grestore
			    } bind def
			    currentdict
			end
			/lowerbytefont exch definefont
		    } forall
		] def
		currentdict
	    end
	    /eucfont exch definefont
	    exch
	    findfont 1 copyfont dup begin
		RomanRotation {
			/FontMatrix FontMatrix
			[ 0 RomanScale neg RomanScale 0 RomanOffset neg 0 ]
			matrix concatmatrix def
		}{
			/FontMatrix FontMatrix
			[ RomanScale 0 0 RomanScale 0 RomanOffset ] matrix concatmatrix
			def
			/CDevProc
			    {pop pop pop pop 0 exch -1000 exch 2 div 880} def
		} ifelse
	    end
	    /asciifont exch definefont
	    exch
	    /FDepVector [ 4 2 roll ] def
	    /FontType 0 def
	    /WMode 0 def
	    /FMapType 4 def
	    /FontMatrix matrix def
	    /Encoding [0 1] def
	    /FontBBox {0 0 0 0} def
%	    /FontHeight 1.0 def % XXXX
	    /FontHeight RomanScale 1.0 ge { RomanScale }{ 1.0 } ifelse def
	    /Descent -0.3 def   % XXXX
	    currentdict
	end
	/tmpfont exch definefont
	pop
	/tmpfont findfont
    }{
	pop findfont 0 copyfont
    } ifelse
} def	

/slantfont {	% FontName slant-degree  slantfont  font'
    exch findfont 1 copyfont begin
    [ 1 0 4 -1 roll 1 0 0 ] FontMatrix exch matrix concatmatrix
    /FontMatrix exch def
    currentdict
    end
} def

% Function print line number (<string> # -)
/# {
  gsave
    sx cw mul neg 2 div 0 rmoveto
    f# setfont
    c-show
  grestore
} bind def

% -------- Some routines to enlight plain b/w printings ---------

% Underline
% width --
/dounderline {
  currentpoint
  gsave
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    0 rlineto
    stroke
  grestore
} bind def

% Underline a string
% string --
/dounderlinestring {
  stringwidth pop
  dounderline
} bind def

/UL {
  /ul exch store
} bind def

% Draw a box of WIDTH wrt current font
% width --
/dobox {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    stroke
  grestore
} bind def

/BX {
  /bx exch store
} bind def

% Box a string
% string --
/doboxstring {
  stringwidth pop
  dobox
} bind def

%
% ------------- Color routines ---------------
%
/FG /setrgbcolor load def

% Draw the background
% width --
/dobackground {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    bgcolor aload pop setrgbcolor
    fill
  grestore
} bind def

% Draw bg for a string
% string --
/dobackgroundstring {
  stringwidth pop
  dobackground
} bind def


/BG {
  dup /bg exch store
  { mark 4 1 roll ] /bgcolor exch store } if
} bind def


/Show {
  bg { dup dobackgroundstring } if
  ul { dup dounderlinestring } if
  bx { dup doboxstring } if
  show
} bind def

% Function T(ab), jumps to the n-th tabulation in the current line
/T {
  cw mul x0 add
  bg { dup currentpoint pop sub dobackground } if
  ul { dup currentpoint pop sub dounderline } if
  bx { dup currentpoint pop sub dobox } if
  y0 moveto
} bind def

% Function n: move to the next line
/n {
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

/S {
  Show
} bind def

%%BeginResource: procset a2ps-a2ps-hdr 2.0 2
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Function title: prints page header.
% <ct> <rt> <lt> are passed as argument
/title { 
  % 1. Draw the background
  x v get y v get moveto
  gsave
    0 th 2 div neg rmoveto 
    th setlinewidth
    0.95 setgray
    pw 0 rlineto stroke
  grestore
  % 2. Border it
  gsave
    0.7 setlinewidth
    pw 0 rlineto
    0 th neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
  % stk: ct rt lt
  x v get y v get th sub 1 add moveto
%%IncludeResource: font Helvetica
  fHelvetica fnfs 0.8 mul scalefont setfont
  % 3. The left title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    fnfs 0.8 mul hm rmoveto
    show			% left title
  grestore
  exch
  % stk: ct ltw rt
  % 4. the right title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    dup
    pw exch stringwidth pop fnfs 0.8 mul add sub
    hm
    rmoveto
    show			% right title
  grestore
  % stk: ct ltw rtw
  % 5. the center title
  gsave
    pw 3 1 roll
    % stk: ct pw ltw rtw
    3 copy 
    % Move to the center of the left room
    sub add 2 div hm rmoveto
    % What is the available space in here?
    add sub fnfs 0.8 mul sub fnfs 0.8 mul sub
    % stk: ct space_left
%%IncludeResource: font Helvetica-Bold
  fHelvetica-Bold fnfs scalefont setfont
    cfshow
  grestore
} bind def

% Function border: prints virtual page border
/border { %def
  gsave				% print four sides
    0 setgray
    x v get y v get moveto
    0.7 setlinewidth		% of the square
    pw 0 rlineto
    0 ph neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
} bind def

% Function water: prints a water mark in background
/water { %def
  gsave
    scx scy moveto rotate
%%IncludeResource: font Times-Bold
  fTimes-Bold 100 scalefont setfont
    .97 setgray
    dup stringwidth pop 2 div neg -50 rmoveto
    show
  grestore
} bind def

% Function rhead: prints the right header
/rhead {  %def
  lx ly moveto
  fHelvetica fnfs 0.8 mul scalefont setfont
  l-show
} bind def

% Function footer (cf rf lf -> -)
/footer {
  fHelvetica fnfs 0.8 mul scalefont setfont
  dx dy moveto
  show

  snx sny moveto
  l-show
  
  fnx fny moveto
  c-show
} bind def
%%EndResource
%%BeginResource: procset a2ps-black+white-Prolog 2.0 1

% Function T(ab), jumps to the n-th tabulation in the current line
/T { 
  cw mul x0 add y0 moveto
} bind def

% Function n: move to the next line
/n { %def
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
}  bind def

/S {
  Show
} bind def

/p {
  false UL
  false BX
  fCourier bfs scalefont setfont
  Show
} bind def

/sy {
  false UL
  false BX
  fSymbol bfs scalefont setfont
  Show
} bind def

/k {
  false UL
  false BX
  fCourier-Oblique bfs scalefont setfont
  Show
} bind def

/K {
  false UL
  false BX
  fCourier-Bold bfs scalefont setfont
  Show
} bind def

/c {
  false UL
  false BX
  fCourier-Oblique bfs scalefont setfont
  Show
} bind def

/C {
  false UL
  false BX
  fCourier-BoldOblique bfs scalefont setfont
  Show 
} bind def

/l {
  false UL
  false BX
  fHelvetica bfs scalefont setfont
  Show
} bind def

/L {
  false UL
  false BX
  fHelvetica-Bold bfs scalefont setfont
  Show 
} bind def

/str{
  false UL
  false BX
  fTimes-Roman bfs scalefont setfont
  Show
} bind def

/e{
  false UL
  true BX
  fHelvetica-Bold bfs scalefont setfont
  Show
} bind def

%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeResource: font Courier
%%IncludeResource: font Courier-Oblique
%%IncludeResource: font Courier-Bold
%%IncludeResource: font Times-Roman
%%IncludeResource: font Symbol
%%IncludeResource: font Courier-BoldOblique
%%BeginResource: encoding ISO-8859-1Encoding
/ISO-8859-1Encoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclam /quotedbl /numbersign /dollar /percent /ampersand /quoteright 
/parenleft /parenright /asterisk /plus /comma /minus /period /slash 
/zero /one /two /three /four /five /six /seven 
/eight /nine /colon /semicolon /less /equal /greater /question 
/at /A /B /C /D /E /F /G 
/H /I /J /K /L /M /N /O 
/P /Q /R /S /T /U /V /W 
/X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore 
/quoteleft /a /b /c /d /e /f /g 
/h /i /j /k /l /m /n /o 
/p /q /r /s /t /u /v /w 
/x /y /z /braceleft /bar /braceright /asciitilde /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclamdown /cent /sterling /currency /yen /brokenbar /section 
/dieresis /copyright /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron 
/degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph /bullet 
/cedilla /onesuperior /ordmasculine /guillemotright /onequarter /onehalf /threequarters /questiondown 
/Agrave /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla 
/Egrave /Eacute /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis 
/Eth /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply 
/Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn /germandbls 
/agrave /aacute /acircumflex /atilde /adieresis /aring /ae /ccedilla 
/egrave /eacute /ecircumflex /edieresis /igrave /iacute /icircumflex /idieresis 
/eth /ntilde /ograve /oacute /ocircumflex /otilde /odieresis /divide 
/oslash /ugrave /uacute /ucircumflex /udieresis /yacute /thorn /ydieresis 
] def
%%EndResource
% Initialize page description variables.
/sh 612 def
/sw 792 def
/llx 24 def
/urx 768 def
/ury 588 def
/lly 24 def
/#copies 1 def
/th 15.000000 def
/fnfs 11 def
/bfs 7.493857 def
/cw 4.496314 def

% Dictionary for ISO-8859-1 support
/iso1dict 8 dict begin
  /fCourier ISO-8859-1Encoding /Courier reencode_font
  /fCourier-Bold ISO-8859-1Encoding /Courier-Bold reencode_font
  /fCourier-BoldOblique ISO-8859-1Encoding /Courier-BoldOblique reencode_font
  /fCourier-Oblique ISO-8859-1Encoding /Courier-Oblique reencode_font
  /fHelvetica ISO-8859-1Encoding /Helvetica reencode_font
  /fHelvetica-Bold ISO-8859-1Encoding /Helvetica-Bold reencode_font
  /fTimes-Bold ISO-8859-1Encoding /Times-Bold reencode_font
  /fTimes-Roman ISO-8859-1Encoding /Times-Roman reencode_font
currentdict end def
/bgcolor [ 0 0 0 ] def
/bg false def
/ul false def
/bx false def
% The font for line numbering
/f# /Helvetica findfont bfs .6 mul scalefont def
/fSymbol /Symbol findfont def
/hm fnfs 0.25 mul def
/pw
   cw 81.400000 mul
def
/ph
   522.321860 th add
def
/pmw urx llx sub pw 2 mul sub 1 div def
/pmh 0 def
/v 0 def
/x [
  0
  dup pmw add pw add
] def
/y [
  pmh ph add 0 mul ph add
  dup
] def
/scx sw 2 div def
/scy sh 2 div def
/snx urx def
/sny lly 2 add def
/dx llx def
/dy sny def
/fnx scx def
/fny dy def
/lx snx def
/ly ury fnfs 0.8 mul sub def
/sx 0 def
/tab 8 def
/x0 0 def
/y0 0 def
%%EndSetup

%%Page: (1-2) 1
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(/*) c n
( * Created by: Jacob Branaugh) N
( * Created on: 10/22/2013 14:30) N
( *) N
( * Code for ECE 473 Lab.) N
( * ) N
( ****************************HARDWARE SETUP*************************************) N
(**********) N
( * - PORTA is connected to the segments of the LED display. and to the pushbutto) N
(ns.) N
( * - PORTA.0 corresponds to segment a, PORTA.1 corresponds to segement b, etc.) N
( * - PORTB bits 4-6 go to a,b,c inputs of the 74HC138.) N
( * - PORTB bit 7 goes to the PWM transistor base.) N
( * - PORTB bit 0 goes to shift load on the bar graph display) N
( * - PORTB bit 1 goes to the clock inputs of the bar graph and encoder boards) N
( * - PORTB bit 2 goes to the serial in of the bar graph display) N
( * - PORTB bit 3 goes to the serial out of the encoder board) N
( *******************************************************************************) N
(**********) N
( *) N
( ****************************LAB 2 SPECIFICS************************************) N
(**********) N
( * - Pull PWM pin PORTB 7 low) N
( * - LED segments are active low) N
( * - Buttons are active low) N
( * - EN_N tied low, EN tied high on LED board) N
( * - COM_EN on button board tied to DEC7 on LED board) N
( *   - Tristate in HI-Z when DEC7 high \(PORTB |= 0b01110000\)) N
( * - COM_LVL on button board tied low) N
( *******************************************************************************) N
(**********) N
( *) N
( ****************************LAB 3 SPECIFICS************************************) N
(**********) N
( * - ) N
( *******************************************************************************) N
(**********) N
( */) N
() p n
(#include) K
( <avr/io.h>) p n
(#include) K
( <util/delay.h>) p n
(#include) K
( <avr/interrupt.h>) p n
() N
(#define) K
( F_CPU 16000000 ) p
(// cpu speed in hertz ) c n
() p n
(#define) K
( SS PB0) p n
(#define) K
( SCK PB1) p n
(#define) K
( MOSI PB2) p n
() N
(#define) K
( DELAY_CLK ) p
(do) K
({) p
(asm) K
(\("nop"\);) p
(asm) K
(\("nop"\);}) p
(while) K
(\(0\)) p n
(#define) K
( COUNT_MAX 1023) p n
() N
(/* Global variable to hold current displayed number */) c n
(volatile) K
( uint16_t number;) p n
() N
(/* Global variable to hold mode determined by push buttons */) c n
(volatile) K
( uint8_t pushbutton_mode = 0x00;) p n
() N
(/* Sets the step size for the encoder counter */) c n
(volatile) K
( uint8_t step_size = 1;) p n
() N
(/* Variables to hold prior states of encoders */) c n
(volatile) K
( uint8_t encoder1_prev_a = 0x00;) p n
(volatile) K
( uint8_t encoder1_prev_b = 0x00;) p n
(volatile) K
( uint8_t encoder2_prev_a = 0x00;) p n
(volatile) K
( uint8_t encoder2_prev_b = 0x00;) p n
() N
(/* Array to hold active low binary encodings for base 10 digits for easy access ) c n
(*/) N
(lab3_code.c) (Page 1/6) (Nov 07, 13 12:46) title
border
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(volatile) K
( uint8_t sev_seg_digits[10] = {) p n
() S 8 T (0b11000000, ) S
(//0) c n
() p 8 T (0b11111001, ) S
(//1) c n
() p 8 T (0b10100100, ) S
(//2) c n
() p 8 T (0b10110000, ) S
(//3) c n
() p 8 T (0b10011001, ) S
(//4) c n
() p 8 T (0b10010010, ) S
(//5) c n
() p 8 T (0b10000011, ) S
(//6) c n
() p 8 T (0b11111000, ) S
(//7) c n
() p 8 T (0b10000000, ) S
(//8) c n
() p 8 T (0b10011000  ) S
(//9) c n
(};) p n
() N
(/* Array to hold binary encodings for PORTB digit select, where the place in the) c n
( array) N
( * corresponds to the digit place */) N
(volatile) K
( uint8_t decoder_select[6] = {) p n
() S 8 T (0b00000000, ) S
(//zero place) c n
() p 8 T (0b00010000, ) S
(//tens place) c n
() p 8 T (0b00110000, ) S
(//hundreds place) c n
() p 8 T (0b01000000, ) S
(//thousands place) c n
() p 8 T (0b00010000, ) S
(//center colon) c n
() p 8 T (0b01110000  ) S
(//hi-Z mode) c n
(};) p n
() N
(/* Holds debounce states for each button */) c n
(volatile) K
( uint16_t state[8] = {0,0,0,0,0,0,0,0};) p n
() N
() N
(/*******************************************************************************) c n
(**********) N
( * Function:) S 16 T () S 24 T (TCNT0_init) N
( * Description:) S 16 T () S 24 T (Initializes timer/counter 0) N
( * Arguments:) S 16 T () S 24 T (None) N
( * Return:) S 16 T () S 24 T (None) N
( *******************************************************************************) N
(*********/) N
(void) k
( TCNT0_init\(\) ) p n
({) N
() S 8 T (TIMSK |= \(1<<TOIE0\); ) S
(//enable timer/counter0 overflow interrupt) c n
() p 8 T (TCCR0 |= \(1<<CS01\); ) S
(//normal mode, prescale by 8) c n
(}) p n
() N
(/*******************************************************************************) c n
(**********) N
( * Function:) S 16 T () S 24 T (SPI_init) N
( * Description:) S 16 T () S 24 T (Initializes SPI on PORTB in master mode) N
( * Arguments:) S 16 T () S 24 T (None) N
( * Return:) S 16 T () S 24 T (None) N
( *******************************************************************************) N
(*********/) N
(void) k
( SPI_init\(\)) p n
({) N
() S 8 T (DDRB |= \(\(1 << SS\) | ) S
(//turns on slave select) c n
() p 8 T () S 16 T ( \(1 << MOSI\) | ) S
(//sets MOSI \(master out, slave in\)) c n
() p 8 T () S 16 T ( \(1 << SCK\)\);  ) S
(//sets master clock output) c n
() p 8 T (SPCR |= \(\(1 << SPE\) |  ) S
(//enables SPI) c n
() p 8 T () S 16 T ( \(1 << MSTR\)\);  ) S
(//sets master SPI mode) c n
() p 8 T (SPSR |= \(1 << SPI2X\);  ) S
(//sets a clock/2 prescalar) c n
(}) p n
() N
(/*******************************************************************************) c n
(**********) N
( * Function:) S 16 T () S 24 T (debounce_switch_X) N
( * Description:) S 16 T () S 24 T (Function takes an unsigned 8-bit integer that represents) N
( the) N
( * ) S 8 T () S 16 T () S 24 T ( pushbutton to check. Checks the state of the pin on PIN) N
(X and) N
( * ) S 8 T () S 16 T () S 24 T ( returns appropriately.) N
(lab3_code.c) (Page 2/6) (Nov 07, 13 12:46) title
border
grestore
(Printed by Jacob) rhead
(lab3_code.c) (1/3) (Thursday November 07, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (3-4) 2
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
( * Arguments:) c 16 T () S 24 T (button - 8 bit input number button to debounce) N
( * Return:) S 16 T () S 24 T (Debounced state of button) N
( * ) S 8 T () S 16 T () S 24 T ( - 0 if successful debounce) N
( * ) S 8 T () S 16 T () S 24 T ( - 1 if unsuccessful debounce) N
( *******************************************************************************) N
(*********/) N
(int) k
(8_t debounce_switch_a\(uint8_t button\) ) p n
({) N
() S 8 T (state[button] = \(state[button] << 1\) | \(! bit_is_clear\(PINA, button\)\) | ) N
(0xE000;) N
() S 8 T () S
(if) K
( \(state[button] == 0xF000\) ) p
(return) K
( 1;) p n
() S 8 T () S
(return) K
( 0;) p n
(}) N
() N
(/*******************************************************************************) c n
(**********) N
( * Function:) S 16 T () S 24 T (button_mode_toggle) N
( * Description:) S 16 T () S 24 T (Function takes button number and toggles corresponding b) N
(its in) N
( * ) S 8 T () S 16 T () S 24 T ( mode variable) N
( * Arguments:) S 16 T () S 24 T (Button number) N
( * Return:) S 16 T () S 24 T (Modifies global mode variable) N
( *******************************************************************************) N
(*********/) N
(void) k
( button_mode_toggle\(uint8_t button\)) p n
({) N
() S 8 T () S
(if) K
( \(button == 0\)) p n
() S 8 T () S 16 T (pushbutton_mode ^= 0x01; ) S
(//toggle first bit) c n
() p 8 T () S
(else) K
( ) p
(if) K
( \(button == 1\)) p n
() S 8 T () S 16 T (pushbutton_mode ^= 0x02; ) S
(//toggle second bit) c n
(}) p n
() N
(/*******************************************************************************) c n
(**********) N
( * Function:) S 16 T () S 24 T (display_digits) N
( * Description:) S 16 T () S 24 T (Function takes a 16 bit \(4 digit base 10\) number and dis) N
(plays each) N
( * ) S 8 T () S 16 T () S 24 T ( number on the appropriate digit. ) N
( * Arguments:) S 16 T () S 24 T (None, number is global) N
( * Return:) S 16 T () S 24 T (None) N
( *******************************************************************************) N
(*********/) N
(void) k
( display_digits\(\) ) p n
({) N
() S 8 T (uint16_t tmp = number; ) S
(//tmp variable to modify number for display) c n
() p 8 T (uint8_t cur_value; ) S
(//current digit value to display) c n
() p 8 T (uint8_t cur_digit = 0; ) S
(//current digit to display on) c n
() p n
() S 8 T () S
(//Set Register A) c n
() p 8 T (PORTA = 0xFF; ) S
(//pullups) c n
() p 8 T (DDRA = 0xFF; ) S
(//output) c n
() p 8 T (DELAY_CLK;) N
() N
() S 8 T () S
(/* Loop displays each base 10 digit one by one. Mods by 10 to get digit,) c n
( displays) N
() S 8 T ( * encoded digit to 7-seg, divides by 10 to get next digit. Loops until ) N
(cur_value) N
() S 8 T ( * is less than 1. */) N
() p 8 T () S
(for) K
( \(cur_digit = 0; cur_digit < 4; cur_digit++\) {) p n
() N
() S 8 T () S 16 T (PORTA = 0xFF; ) S
(//clear PORTA) c n
() p 8 T () S 16 T (DELAY_CLK;) N
() S 8 T () S 16 T (PORTB &= 0x8F; ) S
(//clear decoder bits) c n
() p 8 T () S 16 T (PORTB |= decoder_select[cur_digit]; ) S
(//set portb decoder bits) c n
() p n
() S 8 T () S 16 T () S
(/* Display when number is 0 */) c n
() p 8 T () S 16 T () S
(if) K
( \(tmp < 1 && cur_digit == 0\) {) p n
() S 8 T () S 16 T () S 24 T (PORTA = sev_seg_digits[0]; ) S
(//display digit) c n
() p 8 T () S 16 T (}) N
(lab3_code.c) (Page 3/6) (Nov 07, 13 12:46) title
border
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p n
() S 8 T () S 16 T () S
(/* Display current digit */) c n
() p 8 T () S 16 T () S
(if) K
( \(tmp >= 1\) {) p n
() S 8 T () S 16 T () S 24 T (cur_value = tmp % 10; ) S
(//get current digit to display) c n
() p 8 T () S 16 T () S 24 T (PORTA = sev_seg_digits[cur_value]; ) S
(//display digit) c n
() p 8 T () S 16 T (}) N
() N
() S 8 T () S 16 T (_delay_loop_1\(200\); ) S
(//delay for about arg*3 cycles) c n
() p n
() S 8 T () S 16 T () S
(/* Get next digit if possible */) c n
() p 8 T () S 16 T () S
(if) K
( \(tmp >= 1\) {) p n
() S 8 T () S 16 T () S 24 T (tmp /= 10; ) S
(//get next value) c n
() p 8 T () S 16 T (}) N
() S 8 T (}) N
() N
() S 8 T (PORTB |= 0x70;) N
() S 8 T (PORTA = 0xFF;) N
() S 8 T (DDRA = 0x00;) N
() S 8 T (DELAY_CLK; ) S
(//let everything settle) c n
(}) p n
() N
(/*******************************************************************************) c n
(**********) N
( * Function:) S 16 T () S 24 T (read_buttons) N
( * Description:) S 16 T () S 24 T (Function takes the button to read and calls debounce fun) N
(ction. If) N
( * ) S 8 T () S 16 T () S 24 T ( debounce function returns true, the global number varia) N
(ble is) N
( * ) S 8 T () S 16 T () S 24 T ( incremented by 1<<\(button number\).) N
( * Arguments:) S 16 T () S 24 T (button - 8 bit input number button to debounce) N
( * Return:) S 16 T () S 24 T (None) N
( *******************************************************************************) N
(*********/) N
(void) k
( read_buttons\(\)) p n
({) N
() S 8 T (uint8_t button;) N
() N
() S 8 T (PORTB |= 0x70; ) S
(//activate hi-z, leave everything else) c n
() p 8 T (PORTA = 0xFF; ) S
(//pullups) c n
() p 8 T (DDRA = 0x00; ) S
(//inputs) c n
() p 8 T (DELAY_CLK; ) S
(//let everything settle) c n
() p n
() S 8 T () S
(/* check each button with switch debouncing */) c n
() p 8 T () S
(for) K
( \(button = 0; button < 8; button++\)) p n
() S 8 T () S 16 T () S
(if) K
( \(debounce_switch_a\(button\)\)) p n
() S 8 T () S 16 T () S 24 T (button_mode_toggle\(button\);) N
(}) N
() N
(/*******************************************************************************) c n
(**********) N
( * Function:) S 16 T () S 24 T (read_encoder) N
( * Description:) S 16 T () S 24 T (Checks current state of encoder, compares against previo) N
(us state) N
( * ) S 8 T () S 16 T () S 24 T ( to determine whether encoder is being turned clockwise ) N
(or) N
( * ) S 8 T () S 16 T () S 24 T ( counterclockwise.) N
( * Arguments:) S 16 T () S 24 T (Integer number 1 or 2, representing one of the encoders) N
( * Return:) S 16 T () S 24 T (0 for clockwise turn, 1 for counterclockwise turn) N
( *******************************************************************************) N
(*********/) N
(uint8_t read_encoder\(uint8_t encoder\)) p n
({) N
() S 8 T (uint8_t ret = -1;) N
() S 8 T (uint8_t encoder_cur_a, encoder_cur_b; ) S
(//holds current states) c n
() p 8 T () S
(if) K
( \(encoder == 1\) {) p n
() S 8 T () S 16 T (encoder_cur_a = SPDR & 0x01; ) S
(//gets first bit read from SPI) c n
() p 8 T () S 16 T (encoder_cur_b = \(SPDR & 0x02\) >> 1; ) S
(//gets second bit) c n
() p 8 T () S 16 T () S
(if) K
( \(encoder_cur_a == 1 && encoder_cur_b == 1\) { ) p
(//if encoder tur) c n
(ned) N
(lab3_code.c) (Page 4/6) (Nov 07, 13 12:46) title
border
grestore
(Printed by Jacob) rhead
(lab3_code.c) (2/3) (Thursday November 07, 2013) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (5-6) 3
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T () S 16 T () S 24 T () S
(if) K
( \(encoder1_prev_a == 1 && encoder1_prev_b == 0\) ) p
(//cloc) c n
(kwise) N
() p 8 T () S 16 T () S 24 T () S 32 T (ret = 0;) N
() S 8 T () S 16 T () S 24 T () S
(else) K
( ) p
(if) K
( \(encoder1_prev_a == 0 && encoder1_prev_b == 1\) ) p
(/) c n
(/counter) N
() p 8 T () S 16 T () S 24 T () S 32 T (ret = 1;) N
() S 8 T () S 16 T (}) N
() S 8 T () S 16 T () S
(/* Stores values for later */) c n
() p 8 T () S 16 T (encoder1_prev_a = encoder_cur_a;) N
() S 8 T () S 16 T (encoder1_prev_b = encoder_cur_b;) N
() S 8 T (} ) S
(else) K
( ) p
(if) K
( \(encoder == 2\) {) p n
() S 8 T () S 16 T (encoder_cur_a = \(SPDR & 0x04\) >> 2; ) S
(//gets third bit read from S) c n
(PI) N
() p 8 T () S 16 T (encoder_cur_b = \(SPDR & 0x08\) >> 3; ) S
(//gets fourth bit) c n
() p 8 T () S 16 T () S
(if) K
( \(encoder_cur_a == 1 && encoder_cur_b == 1\) { ) p
(//if encoder tur) c n
(ned) N
() p 8 T () S 16 T () S 24 T () S
(if) K
( \(encoder2_prev_a == 1 && encoder2_prev_b == 0\) ) p
(//cloc) c n
(kwise) N
() p 8 T () S 16 T () S 24 T () S 32 T (ret = 0;) N
() S 8 T () S 16 T () S 24 T () S
(else) K
( ) p
(if) K
( \(encoder2_prev_a == 0 && encoder2_prev_b == 1\) ) p
(/) c n
(/counter) N
() p 8 T () S 16 T () S 24 T () S 32 T (ret = 1;) N
() S 8 T () S 16 T (}) N
() S 8 T () S 16 T () S
(/* Stores values for later */) c n
() p 8 T () S 16 T (encoder2_prev_a = encoder_cur_a;) N
() S 8 T () S 16 T (encoder2_prev_b = encoder_cur_b;) N
() S 8 T (}) N
() N
() S 8 T () S
(return) K
( ret;) p n
(}) N
() N
(/*******************************************************************************) c n
(**********) N
( * Function:) S 16 T () S 24 T (Interrupt Service Routine) N
( * Description:) S 16 T () S 24 T (On TCNT0 overflow, buttons are checked to set mode, mode) N
( is) N
( * ) S 8 T () S 16 T () S 24 T ( displayed on the bar graph display, the encoders are ch) N
(ecked, and) N
( * ) S 8 T () S 16 T () S 24 T ( the global count is incremented or decremented based on) N
( whether) N
( * ) S 8 T () S 16 T () S 24 T ( the encoder was turned clockwise or counter clockwise) N
( * ) S 8 T () S 16 T () S 24 T ( respectively) N
( * Arguments:) S 16 T () S 24 T (None) N
( * Return:) S 16 T () S 24 T (None) N
( *******************************************************************************) N
(*********/) N
(ISR\(TIMER0_OVF_vect\)) p n
({) N
() S 8 T (read_buttons\(\);) N
() N
() S 8 T () S
(/* Sets the counter step size based on button mode) c n
() S 8 T ( * steps by 1 \(default\) if neither pressed) N
() S 8 T ( * steps by 2 if button 1 pressed) N
() S 8 T ( * steps by 4 if button 2 pressed) N
() S 8 T ( * doesn't count if both pressed */) N
() p 8 T () S
(if) K
( \(pushbutton_mode == 0x00\)) p n
() S 8 T () S 16 T (step_size = 0x01;) N
() S 8 T () S
(else) K
( ) p
(if) K
( \(pushbutton_mode == 0x01\)) p n
() S 8 T () S 16 T (step_size = 0x02;) N
() S 8 T () S
(else) K
( ) p
(if) K
( \(pushbutton_mode == 0x02\)) p n
() S 8 T () S 16 T (step_size = 0x04;) N
() S 8 T () S
(else) K
( ) p
(if) K
( \(pushbutton_mode == 0x03\)) p n
() S 8 T () S 16 T (step_size = 0x00;) N
() N
() S 8 T () S
(/* Sets leds on bar graph display */) c n
() p 8 T (SPDR = pushbutton_mode; ) S
(//sets value of SPI data register to mode value) c n
() p 8 T () S
(while) K
(\(bit_is_clear\(SPSR, SPIF\)\); ) p
(//waits for serial transmission to comp) c n
(lete) N
() p 8 T () S
(//PORTB &= 0x8F;) c n
(lab3_code.c) (Page 5/6) (Nov 07, 13 12:46) title
border
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T () S
(//PORTB |= 0x60; //toggle bar graph regclk) c n
() p 8 T () S
(//PORTB &= 0x8F;) c n
() p 8 T (PORTB |= 0x70;) N
() S 8 T (PORTB &= 0xEF; ) S
(//toggle bar graph regclk) c n
() p 8 T (PORTB |= 0x10;) N
() N
() S 8 T () S
(/* Check both encoders for rotation */) c n
() p 8 T (PORTB |= 0x01; ) S
(//toggle shift load on encoder board) c n
() p 8 T (SPDR = 0x00; ) S
(//write a zero for filler purposes) c n
() p 8 T () S
(while) K
(\(bit_is_clear\(SPSR, SPIF\)\); ) p
(//wait for write to finish) c n
() p 8 T (PORTB &= 0xFE; ) S
(//clear shift load bit on encoder board) c n
() p n
() S 8 T (uint8_t check_1 = read_encoder\(1\);) N
() S 8 T (uint8_t check_2 = read_encoder\(2\);) N
() N
() S 8 T () S
(/* If a clockwise turn was made, increment count */) c n
() p 8 T () S
(if) K
( \(check_1 == 0 || check_2 == 0\)) p n
() S 8 T () S 16 T (number += step_size;) N
() N
() S 8 T () S
(/* If a counterclockwise turn was made, decrement count */) c n
() p 8 T () S
(if) K
( \(check_1 == 1 || check_2 == 1\)) p n
() S 8 T () S 16 T (number -= step_size;) N
() N
() S 8 T () S
(/* Ensure number is always between 0 and COUNT_MAX */) c n
() p 8 T (number %= COUNT_MAX + 1;) N
() S 8 T () N
() S 8 T (display_digits\(\);) N
(}) N
() N
(/*******************************************************************************) c n
(**********) N
( ********************************* MAIN FUNCTION *******************************) N
(**********) N
( *******************************************************************************) N
(**********) N
( */) N
(int) k
( main\(\)) p n
({) N
() S 8 T (number = 0; ) S
(//initialize number) c n
() p 8 T () N
() S 8 T () S
(/* Initialization */) c n
() p 8 T (DDRA = 0xFF; ) S
(//outputs) c n
() p 8 T (DDRB = 0xF0; ) S
(//outputs on high nibble) c n
() p 8 T (TCNT0_init\(\); ) S
(//initialize the 8-bit timer counter register) c n
() p 8 T (SPI_init\(\); ) S
(//initialize SPI master on PORTB 1-3) c n
() p n
() S 8 T () S
(/* enable interrupts */) c n
() p 8 T (sei\(\);) N
() N
() S 8 T () S
(while) K
( \(1\);) p n
(}) N
(lab3_code.c) (Page 6/6) (Nov 07, 13 12:46) title
border
grestore
(Printed by Jacob) rhead
(lab3_code.c) (3/3) (Thursday November 07, 2013) footer
end % of iso1dict
pagesave restore
showpage

%%Trailer
end
%%EOF
